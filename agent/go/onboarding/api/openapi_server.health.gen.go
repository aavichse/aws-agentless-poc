// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"github.com/gin-gonic/gin"
)

// GetV1OperationsHealth operation middleware
func (siw *ServerInterfaceWrapper) GetV1OperationsHealth(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1OperationsHealth(c)
}

// GetV1OperationsMetrics operation middleware
func (siw *ServerInterfaceWrapper) GetV1OperationsMetrics(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1OperationsMetrics(c)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlersHealth(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptionsHealth(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptionsHealth(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/operations/health", wrapper.GetV1OperationsHealth)
	router.GET(options.BaseURL+"/v1/operations/metrics", wrapper.GetV1OperationsMetrics)
}
