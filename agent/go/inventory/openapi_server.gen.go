// Package main provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package main

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"

)


// GetV1ProviderImportLabelsParams defines parameters for GetV1ProviderImportLabels.
type GetV1ProviderImportLabelsParams struct {
	// Cursor Cursor is the starting position in the result set.
	Cursor *int `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PageSize Maximum number of inventory items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetV1ProviderInventoryParams defines parameters for GetV1ProviderInventory.
type GetV1ProviderInventoryParams struct {
	// Cursor Cursor is the starting position in the result set.
	Cursor *int `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PageSize Maximum number of inventory items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// GetV1ProviderTopologyParams defines parameters for GetV1ProviderTopology.
type GetV1ProviderTopologyParams struct {
	// Cursor Cursor is the starting position in the result set.
	Cursor *int `form:"cursor,omitempty" json:"cursor,omitempty"`

	// PageSize Maximum number of network items per page
	PageSize *int `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get connector environment labels (with pagination)
	// (GET /v1/provider/import-labels)
	GetV1ProviderImportLabels(c *gin.Context, params GetV1ProviderImportLabelsParams)
	// Retrieve the entire inventory
	// (GET /v1/provider/inventory)
	GetV1ProviderInventory(c *gin.Context, params GetV1ProviderInventoryParams)
	// Retrieve network topology information
	// (GET /v1/provider/topology)
	GetV1ProviderTopology(c *gin.Context, params GetV1ProviderTopologyParams)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetV1ProviderImportLabels operation middleware
func (siw *ServerInterfaceWrapper) GetV1ProviderImportLabels(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ProviderImportLabelsParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ProviderImportLabels(c, params)
}

// GetV1ProviderInventory operation middleware
func (siw *ServerInterfaceWrapper) GetV1ProviderInventory(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ProviderInventoryParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ProviderInventory(c, params)
}

// GetV1ProviderTopology operation middleware
func (siw *ServerInterfaceWrapper) GetV1ProviderTopology(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1ProviderTopologyParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1ProviderTopology(c, params)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/provider/import-labels", wrapper.GetV1ProviderImportLabels)
	router.GET(options.BaseURL+"/v1/provider/inventory", wrapper.GetV1ProviderInventory)
	router.GET(options.BaseURL+"/v1/provider/topology", wrapper.GetV1ProviderTopology)
}
