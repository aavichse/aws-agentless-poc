// Package models provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package models

import (
	"encoding/json"

	externalRef0 "common/common.yaml"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ConfigOptsOptType.
const (
	OptBool   ConfigOptsOptType = "opt_bool"
	OptFloat  ConfigOptsOptType = "opt_float"
	OptInt    ConfigOptsOptType = "opt_int"
	OptString ConfigOptsOptType = "opt_string"
)

// ConfigOpts defines model for ConfigOpts.
type ConfigOpts struct {
	DefaultValue ConfigOpts_DefaultValue `json:"default_value"`
	Description  string                  `json:"description"`
	Name         string                  `json:"name"`
	OptType      ConfigOptsOptType       `json:"opt_type"`
}

// ConfigOptsDefaultValue0 defines model for .
type ConfigOptsDefaultValue0 = string

// ConfigOptsDefaultValue1 defines model for .
type ConfigOptsDefaultValue1 = int

// ConfigOptsDefaultValue2 defines model for .
type ConfigOptsDefaultValue2 = bool

// ConfigOptsDefaultValue3 defines model for .
type ConfigOptsDefaultValue3 = float32

// ConfigOpts_DefaultValue defines model for ConfigOpts.DefaultValue.
type ConfigOpts_DefaultValue struct {
	union json.RawMessage
}

// ConfigOptsOptType defines model for ConfigOpts.OptType.
type ConfigOptsOptType string

// Configuration defines model for Configuration.
type Configuration struct {
	Name  string `json:"name"`
	Value string `json:"value"`
}

// InternalConfig defines model for InternalConfig.
type InternalConfig struct {
	Configs []Configuration `json:"configs"`
}

// InternalConfigMetadata defines model for InternalConfigMetadata.
type InternalConfigMetadata struct {
	ComponentId   openapi_types.UUID     `json:"component-id"`
	ComponentType externalRef0.Connector `json:"component-type"`
	Opts          []ConfigOpts           `json:"opts"`
}

// PostV1OperationsInternalInternalConfigJSONRequestBody defines body for PostV1OperationsInternalInternalConfig for application/json ContentType.
type PostV1OperationsInternalInternalConfigJSONRequestBody = InternalConfig

// AsConfigOptsDefaultValue0 returns the union data inside the ConfigOpts_DefaultValue as a ConfigOptsDefaultValue0
func (t ConfigOpts_DefaultValue) AsConfigOptsDefaultValue0() (ConfigOptsDefaultValue0, error) {
	var body ConfigOptsDefaultValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigOptsDefaultValue0 overwrites any union data inside the ConfigOpts_DefaultValue as the provided ConfigOptsDefaultValue0
func (t *ConfigOpts_DefaultValue) FromConfigOptsDefaultValue0(v ConfigOptsDefaultValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigOptsDefaultValue0 performs a merge with any union data inside the ConfigOpts_DefaultValue, using the provided ConfigOptsDefaultValue0
func (t *ConfigOpts_DefaultValue) MergeConfigOptsDefaultValue0(v ConfigOptsDefaultValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigOptsDefaultValue1 returns the union data inside the ConfigOpts_DefaultValue as a ConfigOptsDefaultValue1
func (t ConfigOpts_DefaultValue) AsConfigOptsDefaultValue1() (ConfigOptsDefaultValue1, error) {
	var body ConfigOptsDefaultValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigOptsDefaultValue1 overwrites any union data inside the ConfigOpts_DefaultValue as the provided ConfigOptsDefaultValue1
func (t *ConfigOpts_DefaultValue) FromConfigOptsDefaultValue1(v ConfigOptsDefaultValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigOptsDefaultValue1 performs a merge with any union data inside the ConfigOpts_DefaultValue, using the provided ConfigOptsDefaultValue1
func (t *ConfigOpts_DefaultValue) MergeConfigOptsDefaultValue1(v ConfigOptsDefaultValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigOptsDefaultValue2 returns the union data inside the ConfigOpts_DefaultValue as a ConfigOptsDefaultValue2
func (t ConfigOpts_DefaultValue) AsConfigOptsDefaultValue2() (ConfigOptsDefaultValue2, error) {
	var body ConfigOptsDefaultValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigOptsDefaultValue2 overwrites any union data inside the ConfigOpts_DefaultValue as the provided ConfigOptsDefaultValue2
func (t *ConfigOpts_DefaultValue) FromConfigOptsDefaultValue2(v ConfigOptsDefaultValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigOptsDefaultValue2 performs a merge with any union data inside the ConfigOpts_DefaultValue, using the provided ConfigOptsDefaultValue2
func (t *ConfigOpts_DefaultValue) MergeConfigOptsDefaultValue2(v ConfigOptsDefaultValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsConfigOptsDefaultValue3 returns the union data inside the ConfigOpts_DefaultValue as a ConfigOptsDefaultValue3
func (t ConfigOpts_DefaultValue) AsConfigOptsDefaultValue3() (ConfigOptsDefaultValue3, error) {
	var body ConfigOptsDefaultValue3
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromConfigOptsDefaultValue3 overwrites any union data inside the ConfigOpts_DefaultValue as the provided ConfigOptsDefaultValue3
func (t *ConfigOpts_DefaultValue) FromConfigOptsDefaultValue3(v ConfigOptsDefaultValue3) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeConfigOptsDefaultValue3 performs a merge with any union data inside the ConfigOpts_DefaultValue, using the provided ConfigOptsDefaultValue3
func (t *ConfigOpts_DefaultValue) MergeConfigOptsDefaultValue3(v ConfigOptsDefaultValue3) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t ConfigOpts_DefaultValue) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ConfigOpts_DefaultValue) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
