// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	model "agentless/infra/model/operations"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// GetV1OperationsEnvInfo operation middleware
func (siw *ServerInterfaceWrapper) GetV1OperationsEnvInfo(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1OperationsEnvInfo(c)
}

// GetV1OperationsEnvUnitsList operation middleware
func (siw *ServerInterfaceWrapper) GetV1OperationsEnvUnitsList(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params model.GetV1OperationsEnvUnitsListParams

	// ------------- Optional query parameter "cursor" -------------

	err = runtime.BindQueryParameter("form", true, false, "cursor", c.Request.URL.Query(), &params.Cursor)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter cursor: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "page_size" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_size", c.Request.URL.Query(), &params.PageSize)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter page_size: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV1OperationsEnvUnitsList(c, params)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlersInfo(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptionsInfo(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptionsInfo(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v1/operations/env-info", wrapper.GetV1OperationsEnvInfo)
	router.GET(options.BaseURL+"/v1/operations/env-units-list", wrapper.GetV1OperationsEnvUnitsList)
}
